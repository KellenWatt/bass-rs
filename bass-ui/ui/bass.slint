import { ListView, Button, ScrollView } from "std-widgets.slint";
import { Music } from "./types.slint";
import { KeywordList, ExitButton, BusinessLogic } from "./common.slint";

import { KeywordInput, KeywordInputLogic } from "keyword-input.slint";

import { AddDialog } from "./add-item.slint";
import { DetailedView } from "detailed-view.slint";

import { SearchBar, UISearch, SearchDialog } from "search.slint";

export { AddDialog, SearchDialog }
export { KeywordInputLogic, BusinessLogic }


component ItemCell inherits Rectangle {
    in property<string> text;
    in property<color> text-color;

    body := Text {
        width: parent.width;
        text: parent.text;
        color: parent.text-color;
        horizontal-alignment: left;
        overflow: elide;
    }
}

component ItemSeparator inherits Rectangle {
    buffer := Rectangle {
        width: 0.2rem;
    }
    vr := Rectangle {
        background: #888;
        width: 1px;
        x: buffer.width;
    }
    buffer2 := Rectangle {
        x: buffer.width + vr.width;
        width: 0.2rem;
    }

    width: buffer.width + vr.width + buffer.width;
}

component MusicItem inherits Rectangle {
    in property<Music> music;
    in property<bool> selected;

    in property<length> title-width;
    in property<length> source-width;
    in property<length> composer-width;
    in property<length> arranger-width;
    in property<length> keywords-width;

    callback click-handler(int);
    callback keyword-clicked <=> keywords.keyword-clicked;

    in property<bool> insert-separator;
    in property<length> separator-size: 1px;

    out property<bool> is-hovered: listing.has-hover || self.selected;

    background: is-hovered ? #9AC : #EEE;
    animate background {
        duration: 70ms;
        easing: ease-in-out-sine;
    }


    property<color> text-color: is-hovered ? #000 : #222;
    HorizontalLayout {
        // y: insert-separator ? separator-size : 0px;
        // padding: 0.2rem;
        // spacing: 0.2rem;
        height: 1.6rem;
        listing := TouchArea {
            clicked => {
                click-handler(root.music.id);
            }
            HorizontalLayout {
                Rectangle {
                    // padding
                    width: 0.2rem + 3.5px;
                }

                ItemCell {
                    // This random 1px seems to correct spacing well enough. I don't know why.
                    width: title-width;
                    height: parent.height;
                    text: music.title;
                    text-color: root.text-color;
                }
                ItemSeparator {
                }
                ItemCell {
                    width: source-width;
                    height: parent.height;
                    text: music.source;
                    text-color: root.text-color;
                }
                ItemSeparator {
                }
                ItemCell {
                    width: composer-width;
                    height: parent.height;
                    text: music.composer;
                    text-color: root.text-color;
                }
                ItemSeparator {
                }
                ItemCell {
                    width: arranger-width;
                    height: parent.height;
                    text: music.arranger;
                    text-color: root.text-color;
                }
                ItemSeparator {
                }
            }
        }
        keywords := KeywordList {
            y: 0.2rem;
            width: keywords-width;
            words: music.keywords;
        }
        ItemSeparator {
        }
    }
    if insert-separator: Rectangle {
        height: separator-size; 
        width: parent.width;
        x: 0;
        y: root.height - separator-size;
        background: #BBB;
    }
}

component HeaderSeparator inherits Rectangle {
    callback dragged(length);

    buffer := Rectangle {
        width: 0.2rem;
    }
    vr := Rectangle {
        background: #222;
        x: buffer.width;
        width: 1px;
    }
    buffer2 := Rectangle {
        x: buffer.width + vr.width;
        width: 0.2rem;
    }

    width: buffer.width + vr.width + buffer.width;

    TouchArea {
        mouse-cursor: col-resize;
        moved() => {
            dragged(self.mouse-x);
        }
    }
}

component HeaderItem inherits Rectangle {
    in-out property<length> size;
    in property<string> text;

    body := Text {
        text: root.text;
        font-size: 1.3rem;
        width: root.size;
        height: parent.height;
        vertical-alignment: center;
        horizontal-alignment: center;
        color: black;
    }
    sep := HeaderSeparator {
        x: body.x + body.width; 
        dragged(dx) => {
            if (root.size + dx > 1rem) {
                root.size += dx;
            }
        }
    }
    width: body.width + sep.width;
}
component MusicListHeader inherits Rectangle {
    in-out property<length> title-width;
    in-out property<length> source-width;
    in-out property<length> composer-width;
    in-out property<length> arranger-width;
    in-out property<length> keywords-width;

    clip: true;
    
    background: #AAA;
    HorizontalLayout {
        height: 2rem;
        Rectangle {
            // padding
            width: 0.2rem;
        }
        HeaderItem {
            text: "Title";
            size <=> title-width;
        }
        HeaderItem {
            text: "Source";
            size <=> source-width;
        }
        HeaderItem {
            text: "Composer";
            size <=> composer-width;
        }
        HeaderItem {
            text: "Arranger";
            size <=> arranger-width;
        }
        HeaderItem {
            text: "Keywords";
            size <=> keywords-width;
        }
    }

}

component MusicList inherits ListView {
    in-out property<int> selected-item: -1;
    in property<[Music]> music;

    in-out property<length> title-width;
    in-out property<length> source-width;
    in-out property<length> composer-width;
    in-out property<length> arranger-width;
    in-out property<length> keywords-width;

    callback keyword-clicked(string);

    horizontal-scrollbar-policy: always-off;
    // Disable horizontal scrolling
    scrolled() => {
        self.viewport-x = 0px;
    }

    for piece[i] in music: MusicItem {
        music: piece;
        selected: root.selected-item == i;
        click-handler(id) => {
            root.selected-item = i;
        }

        keyword-clicked(s) => {
            root.keyword-clicked(s);
        }

        width: parent.width + 2px;
        // x: parent.x;
        title-width <=> root.title-width;
        source-width <=> root.source-width;
        composer-width <=> root.composer-width;
        arranger-width <=> root.arranger-width;
        keywords-width <=> root.keywords-width;
        insert-separator: true;
    }

}

component MusicListContainer inherits Rectangle {
    in property<[Music]> music;
    in-out property<int> selected-id <=> list.selected-item;

    in-out property<length> title-width: 8rem;
    in-out property<length> source-width: 8rem;
    in-out property<length> composer-width: 8rem;
    in-out property<length> arranger-width: 8rem;
    in-out property<length> keywords-width: 15rem;

    callback show-add-dialog;
    callback keyword-clicked <=> list.keyword-clicked;

    header := MusicListHeader {
        y: 0;
        height: 2rem;
        title-width <=> root.title-width;
        source-width <=> root.source-width;
        composer-width <=> root.composer-width;
        arranger-width <=> root.arranger-width;
        keywords-width <=> root.keywords-width;
    }

    
    list := MusicList {
        y: header.height - 2px;
        height: parent.height - header.height;
        width: parent.width + 4px;
        music <=> root.music;
        title-width <=> root.title-width;
        source-width <=> root.source-width;
        composer-width <=> root.composer-width;
        arranger-width <=> root.arranger-width;
        keywords-width <=> root.keywords-width;
    }

    // // This seems to cause the dialog to unpredictably hang, while button doesn't. For some reason.
    // Rectangle {
    //     accessible-role: button;
    //     width: 3rem;
    //     height: 3rem;
    //     x: parent.width - (3rem + 1rem);
    //     y: parent.height - (3rem + 1rem);
    //     border-radius: 0.5rem;
    //     background: #777;
    // 
    // 
    //     Path {
    //         viewbox-width: 2;
    //         viewbox-height: 2;
    //         viewbox-x: -1;
    //         viewbox-y: -1;
    //         stroke-width: 0.2rem;
    //         stroke: #EEE;
    // 
    //         MoveTo{x: 0; y: 0.5;}
    //         LineTo{x: 0; y: -0.5;}
    //         MoveTo{x: -0.5; y: 0;}
    //         LineTo{x: 0.5; y: 0;}
    //     }
    // 
    //     TouchArea {
    //         clicked => {
    //             show-add-dialog();
    //         }
    //     }
    // }
    Button {
        width: 3rem;
        height: 3rem;
        x: parent.width - (3rem + 1rem);
        y: parent.height - (3rem + 1rem);
        text: "Add";
    
        clicked => {
            show-add-dialog();
        }
    }
}

export enum FontSizeAction {
    Default,
    Increase,
    Decrease,
}

export component Bass inherits Window {
    // in-out property<int> selected-id <=> list.selected-id;
    out property<Music> selection;
    in property<length> detailed-view-size: 15rem;
    in property<length> search-bar-size: 12rem;
    in property<[UISearch]> saved-searches <=> search-bar.searches;
    in property<bool> results-filtered <=> search-bar.search-active;
    in property<length> _default-font-size: 16px;

    min-width: 62rem;
    min-height: 25rem;
    preferred-height: 40rem;

    default-font-size: _default-font-size;
    title: "Bass Music Organizer";
    icon: @image-url("./images/bass-db-icon-small.png");


    callback show-search-dialog <=> search-bar.search-clicked;
    callback search(UISearch);
    callback clear-search <=> search-bar.clear-search;
    callback add-search <=> search-bar.add-search;
    callback remove-search <=> search-bar.remove-search;
    callback refresh-searches;

    callback show-add-dialog <=> list.show-add-dialog;
    callback trigger-refresh;
    callback update-entry(Music);
    callback remove-entry(Music);
    callback remove-keyword(Music, int, string);
    callback add-keyword(Music, string);

    callback export-db;
    callback update-default-font-size(FontSizeAction);

    property<[string]> keys;
    
    public function clear-selection() {
        list.selected-id = -1;
    }

    in property<[Music]> music-list;
    HorizontalLayout {

        search-bar := SearchBar {
            display-width: search-bar-size;
            max-display-width: 50rem;

            clear-button-offset: list.selected-id >= 0 ? detailed-view-size : 2rem;

            trigger-search(s) => {
                clear-selection();
                search(s);
            }
        }
        
        VerticalLayout {
            list := MusicListContainer {
                music: music-list;
                changed selected-id => {
                    root.selection = music-list[self.selected-id];
                }

                keyword-clicked(k) => {
                    // self.selected-id = -1;
                    clear-selection();
                    search({
                        name: "",
                        search-text: "keywords  has " + k,
                    });
                }
            }

            if list.selected-id >= 0: DetailedView {
                // Text {text: list.selected-id;}
                selection: root.selection;
                display-height: detailed-view-size;
                max-display-height: 40rem;
                min-display-height: 15rem;
                close => {
                    clear-selection();
                }
                update(music) => {
                    update-entry(music);
                    trigger-refresh();
                }
                remove-keyword(music, idx, word) =>  {
                    root.remove-keyword(music, idx, word);
                    trigger-refresh();
                }
                add-keyword(music, word) => {
                    root.add-keyword(music, word);
                    trigger-refresh();
                }
                delete(music) => {
                    remove-entry(music);
                    trigger-refresh();
                }

                keyword-clicked(keyword) => {
                    search({
                        name: "",
                        search-text: "keywords  has " + keyword,
                    });
                }
            }
        }
    }

    MenuBar {
        Menu {
            title: "File";
            MenuItem {
                title: "Export Database...";
                activated => {
                    export-db();
                }
            }
            MenuSeparator{}
            MenuItem {
                title: "New Entry...";
                activated => {show-add-dialog()}
            }
            MenuItem {
                title: "Delete Selected Entry";
                enabled: list.selected-id != -1;
                activated => {remove-entry(root.selection)}
            }

        }

        Menu {
            title: "View";

            MenuItem {
                title: "Search...";
                activated => {show-search-dialog();}
            }

            // MenuItem {
            //     title: "Save current search";
            //     activated => {/* TODO at some point */}
            // }

            MenuSeparator{}

            MenuItem {
                title: "Default font size";
                activated => {update-default-font-size(FontSizeAction.Default)}
            }
            MenuItem {
                title: "Bigger";
                activated => {update-default-font-size(FontSizeAction.Increase)}
            }
            MenuItem {
                title: "Smaller";
                activated => {update-default-font-size(FontSizeAction.Decrease)}
            }
        }
    }
}
