import { PaddedRectangle, FormField, ErrorToast } from "common.slint";
import { Button, ListView, StandardButton } from "std-widgets.slint";
import { KeywordInput } from "keyword-input.slint";

export struct UISearch {
    name: string,
    search-text: string,
}

export component SearchDialog inherits Dialog {
    callback submit(out: UISearch);

    property<length> label-size: 5rem;
    property<length> input-width: 20rem;

    min-width: 27.5rem;
    min-height: 20rem;

    preferred-width: 27.5rem;
    preferred-height: 20rem;

    default-font-size: 18px;
    title: "Music Search";

    Rectangle {
        height: parent.height - 3.3rem;
        PaddedRectangle {
            content-padding: 1rem;
        }
    }
}

component SearchList inherits ListView {
    in property<[UISearch]> searches;
    callback trigger-search(UISearch);

    for search in searches: Rectangle {
        Text {
            text: "TODO";
        }
    }
}

export component SearchBar inherits Rectangle {
    in-out property<length> display-width;
    in property<length> max-display-width;
    in-out property<bool> showing: true;

    in property<[UISearch]> searches;

    callback search-clicked <=> search.clicked;
    callback trigger-search <=> search-list.trigger-search;
    callback clear-search;

    width: showing ? min(max-display-width, max(display-width, 12rem)) : 0;

    VerticalLayout {
        search := Button {
            text: "Search";
            width: parent.width;
            height: 3rem;
        }
        Rectangle {
            label := PaddedRectangle {
                content-padding: 0.5rem;
                height: content.height + self.vertical-padding;
                background: #555;
                y: 0;
                content := Text {
                    x: 0;
                    y: 0;
                    width: parent.content-width;
                    horizontal-alignment: center;
                    text: "Saved Searches";
                    font-size: 1.2rem;
                    font-weight: 600;
                }
            }
            search-list := SearchList {
                x: 0;
                y: label.height;
                height: parent.height * 50%;
                // background: pink;
                searches: root.searches;
            }
        }
    }
    // Collapse toggle
    Rectangle {
        border-top-right-radius: 0.5rem;
        y: root.height - 2rem;
        x: root.width;
        z: 255;
        height: 2rem;
        width: 2rem;
        background: #777;
        TouchArea {
            clicked() => {
                display-width = 0px;
                showing = !showing;
            }
        }
        Path {
            width: parent.width;
            height: parent.height;
            stroke: #EEE;
            stroke-width: 2px;
            viewbox-width: 2;
            viewbox-height: 2;
            viewbox-x: -1;
            viewbox-y: -1;

            MoveTo {x: root.showing ? 0.25 : -0.25; y: -0.5;}
            LineTo {x: root.showing ? -0.25 : 0.25; y: 0;}
            LineTo {x: root.showing ? 0.25 : -0.25; y: 0.5;}
        }
    }

    // Right-side vertical draggable separator.
    Rectangle {
        x: root.width + -0.2rem - 2px;
        width: 0.4rem + 5px;
        HorizontalLayout {

            Rectangle {
                width: 0.2rem;
                height: sep.height;
            }

            sep := Rectangle {
                y: 0;
                height: parent.height;
                width: 2px;
                border-width: 1px;
                border-color: #555;
                background: #444;

            }
            
            Rectangle {
                width: 0.2rem;
                height: sep.height;
            }
            
        }
        TouchArea {
            mouse-cursor: col-resize;
            moved() => {
                if (root.display-width + self.mouse-x > 12rem) {
                    root.display-width += self.mouse-x;
                }
            }
        }
    }
}
